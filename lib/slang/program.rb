module SLang
  class Program
    def self.run
      prog = [:do,
              [:class, :Integer, nil,
               [:operator, :+, [:Integer], :Integer],
               [:operator, :-, [:Integer], :Integer],
               [:operator, :*, [:Integer], :Integer],
               [:operator, :/, [:Integer], :Integer],
               [:operator, :%, [:Integer], :Integer],
               [:operator, :<<, [:Integer], :Integer],
               [:operator, :>>, [:Integer], :Integer],
               [:operator, :&, [:Integer], :Integer],
               [:operator, :|, [:Integer], :Integer],
               [:operator, :^, [:Integer], :Integer],
               [:operator, :>, [:Integer], :Bool],
               [:operator, :<, [:Integer], :Bool],
               [:operator, :>=, [:Integer], :Bool],
               [:operator, :<=, [:Integer], :Bool],
               [:operator, :==, [:Integer], :Bool],
               [:operator, :!=, [:Integer], :Bool],
               [:operator, :+, [:Float], :Float],
               [:operator, :-, [:Float], :Float],
               [:operator, :*, [:Float], :Float],
               [:operator, :/, [:Float], :Float],
               [:operator, :%, [:Float], :Float],
               [:operator, :>, [:Float], :Bool],
               [:operator, :<, [:Float], :Bool],
               [:operator, :>=, [:Float], :Bool],
               [:operator, :<=, [:Float], :Bool],
               [:operator, :==, [:Float], :Bool],
               [:operator, :!=, [:Float], :Bool],
               [:fun, :to_f, [], [:cast, :Float, :self]],
               [:fun, :to_i, [], [:ret, :self]]
              ],
              [:class, :Float, nil,
               [:operator, :+, [:Integer], :Float],
               [:operator, :-, [:Integer], :Float],
               [:operator, :*, [:Integer], :Float],
               [:operator, :/, [:Integer], :Float],
               [:operator, :%, [:Integer], :Float],
               [:operator, :>, [:Integer], :Bool],
               [:operator, :<, [:Integer], :Bool],
               [:operator, :>=, [:Integer], :Bool],
               [:operator, :<=, [:Integer], :Bool],
               [:operator, :==, [:Integer], :Bool],
               [:operator, :!=, [:Integer], :Bool],
               [:operator, :+, [:Float], :Float],
               [:operator, :-, [:Float], :Float],
               [:operator, :*, [:Float], :Float],
               [:operator, :/, [:Float], :Float],
               [:operator, :%, [:Float], :Float],
               [:operator, :>, [:Float], :Bool],
               [:operator, :<, [:Float], :Bool],
               [:operator, :>=, [:Float], :Bool],
               [:operator, :<=, [:Float], :Bool],
               [:operator, :==, [:Float], :Bool],
               [:operator, :!=, [:Float], :Bool],
               [:fun, :to_i, [], [:cast, :Integer, :self]],
               [:fun, :to_f, [], [:ret, :self]]
              ],
              [:class, :Bool, nil,
               [:operator, :'&&', [:Bool], :Bool],
               [:operator, :'||', [:Bool], :Bool],
               [:operator, :!, [:Bool], :Bool],
               [:fun, :or, [:n], [:'||', :self, [:n]]],
               [:fun, :and, [:n], [:'&&', :self, [:n]]],
               [:fun, :not, [:n], [:!, :self, [:n]]],
              ],
              [:class, :String, nil,
               [:external, :echo, :puts, [], :Integer],
               [:external, :len, :strlen, [], :Integer],
               [:external, :dup, :strdup, [], :String],
               [:external, :grow, :realloc, [:Integer], :String],
               [:external, :cat, :strcat, [:String], :String],
               [:fun, :<<, [:s], [[:set, :len, [:+, [:+, [:len, :self], [[:len, :s]]], [1]]],
                                  [:set, :self, [:grow, :self, [:len]]],
                                  [:cat, :self, [:s]]]]
              ],
              [:class, :Greeter, nil,
               [:fun, :set_name, [:name], [:set, :@name, :name]],
               [:fun, :say_hello, [], [:echo, [:<<, [:dup, "hello, "], [:@name]]]],
               [:fun, :set_id, [:id], [:set, :@id, :id]],
               [:fun, :get_id, [], [:ret, :@id]]
              ],
              [:class, :A, nil,
                  [:set, :@@a, 2],
               [:fun, :foo, [], [[:echo, "A:foo"], [:set, :@a, 1]]],
               [:fun, :bar, [], [[:echo, "A:bar"], [:ret, :@@a]]]
              ],
              [:class, :B, :A,
               [:set, :@@a, 2.3],
               [:fun, :foo, [], [:set, :@a, 2.3]],
               [:fun, :bar, [], [[:echo, "B:bar"], [:ret, :@@a]]]
              ],
              [:class, :C, :B,
                  [:fun, :foo, [], [:ret, :@@a]],
                  [:fun, :bar, [], [:set, :@@a, "hello"]]
              ],
              [:echo, [:<<, [:dup, "Hello"], [" World"]]],
              [:set, :f, [:new, :Greeter]],
              [:set, :g, [:new, :Greeter]],
              [:set, :h, [:new, :Greeter]],
              [:set, :i, [:new, :Greeter]],
              [:set_id, :f, ["01"]],
              [:get_id, :f],
              [:set_name, :g, ["Prostory"]],
              [:say_hello, :g],
              [:set_id, :g, [1]],
              [:set_id, :h, [2]],
              [:set_id, :i, [3]],
              [:get_id, :i],
              [:set_id, :i, [3.3]],
              [:get_id, :i],
              [:set, :a, 5.5],
              [:set, :b, [:to_i, :a]],
              [:set, :a, 5],
              [:set, :b, [:to_f, :a]],
              [:set, :d, [:new, :A]],
              [:set, :e, [:new, :B]],
              [:foo, :d],
              [:foo, :e],
              [:bar, :d],
              [:bar, :e],
              [:set, :f, [:new, :C]],
              [:foo, :f],
              [:bar, :f],
              [:foo, :f]
      ]
      main_prog = [:fun, :main, [], prog << [:ret, [:&, 5, [[:<<, 1, [2]]]]], :Integer]

      CLang::Context.new.gen_code(Parser.parse(main_prog))
    end
  end
end